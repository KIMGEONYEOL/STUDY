package test.generics;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class GenericsSample {
	public void test1() {
		// Collection Class 들은 여러 종류의 Class 객체들을 저장 할 수 있다.
		List list = new ArrayList();
		
		
		list.add(new String("java"));
		list.add(new Book("데미안", "헤르만 헤세"));
		list.add(new Date());
		
		System.out.println(list); // 저장 순서대로 저장된 것 확인
		
		// 저장된 객체를 하나씩 꺼내서 사용하려고 할 때, 기본적으로 Object 타입으로 추출됨
		// get(index) : Object 반환됨
		for(Object obj : list) {
			// Object 타입의 레퍼런스로는 Object 클래스가 가진 메서드나 필드만 다룰 수 있음.
			// toString(), equals(), clone(), hashCode() 메서드만 사용할 수 있다.
			// 후손 클래스들이 오버라이딩 한 경우에는 실행시 오버라이딩 된 후손쪽 메서드로 연결이 바뀜
			System.out.println(obj/* .toString() */);
			
			// 만약, 각 후손 클래스가 가진 멤버를 사용하려면 Object 레퍼런스로는 다룰 수 없음
			// obj.toUpperCase(); // String 클래스를 대문자로 변환하는 메서드임 => Error
			// 해결방법 : Object 레퍼런스를 후손 클래스 타입으로 형변환해야 함
		}
	}
}

class Book {
	private String title;
	private String author;
	
	public Book() {}
	
	

	public Book(String title, String author) {
		super();
		this.title = title;
		this.author = author;
	}



	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getAuthor() {
		return author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	@Override
	public String toString() {
		return "Book [title=" + title + ", author=" + author + "]";
	}
	
	
}

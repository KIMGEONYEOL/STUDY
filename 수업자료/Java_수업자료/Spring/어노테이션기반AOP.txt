[어노테이션 기반 AOP]

1. 어노테이션 사용을 위한 스프링 설정
 => 가장 먼저 스프링 설정 파일에 <aop:aspectj-autoproxy> 앨리먼트 선언해야 함
    스프링 설정 파일 servlet-context.xml 파일에 Namespaces 탭 선택
	>> aop 체크함
    	>> 추가된 aop 탭 클릭 
	>> beans 에 마우스 오른쪽 클릭 
	>> Insert <aop:aspectj-autoproxy> 선택함

	*** <aop:aspectj-autoproxy> 앨리먼트만 선언하면 
	    스프링 컨테이너는 AOP 관련 어노테이션들을 
	    인식하고 용도에 맞게 처리해 준다. *** 

 => 어드바이스 클래스에 AOP 관련 어노테이션들을 설정하면 된다.
    어드바이스 클래스는 반드시 스프링 설정 파일에 <bean> 등록하거나, 
    아니면 @Service 어노테이션을 사용하면 된다.

//-------------------------------------------------------------------------------------------------------

   *** aop:pointcut 지정시 expression 속성에 필터링할 메소드에 대한 
	표현식을 설정해 주어야 한다.
	execution(* com.kh.biz. .*Impl.get*(..))

	<포인트컷 표현식>
	* 	com.kh.biz.   	.*Impl.	*(..)
	* 	com.kh.biz.   	.*Impl.	get*(..)
	리턴타입	패키지경로		클래스명	매소드명 및 매개변수

	: 리턴타입과 매개변수를 무시하고, com.kh.biz 패키지로 시작하는 클래스 중에서
	이름이 Impl로 끝나는 클래스의 모든 메소드 또는 get 으로 시작하는 메소드

	1) 리턴타입 지정
	 * : 모든 리턴타입 허용
	 void : 리턴타입이 void 인 메소드 선택
	 !void : 리턴타입이 void 가 아닌 메소드 선택

	2) 패키지 지정
	 com.kh.test : 정확하게 com.kh.test 패키지만 선택
	 com.kh.test.. : com.kh.test 로 시작하는 모든 패키지 선택
	 com.kh.test..*impl : com.kh.test 로 시작해서 마지막 패키지 이름이
			impl로 끝나는 패키지 선택

	3) 클래스 지정
	 BoardServiceImpl : 정확하게 BoardServiceImpl 클래스만 선택
	 *Impl : 클래스 이름이 Impl로 끝나는 클래스만 선택
	 BoardService+ : 클래스 이름 뒤에 '+'가 붙으면 해당 클래스로부터 파생된
		모든 자식 클래스 선택.
		인터페이스 뒤에 '+'가 붙으면 해당 인터페이스를 구현한 모든 클래스
		선택

	4) 메소드 지정
	 *(..) : 가장 기본 설정으로 모든 메소드 선택
	 get*(..) : 메소드 이름이 get으로 시작하는 모든 메소드 선택

	5) 매개변수 지정
	 (..) : 가장 기본 설정으로 '..'은 매개변수의 개수와 타입에 제약이 없음을 의미
	 (*) : 반드시 1개의 매개변수를 가진 메소드만 선택
	 (com.kh.user.UserVO) : 매개변수로 UserVO를 가지는 메소드만 선택,
		이때 클래스의 패키지 경로가 반드시 포함되어야 함
	 (!com.kh.user.UserVO) : 매개변수로 UserVO를 가지지 않는 메소드만 선택
	 (Integer, ..) : 한 개이상의 매개변수를 가지되, 첫번째 매개변수의 타입이
		Integer 인 메소드만 선택
	 (Integer, *) : 반드시 두 개의 매개변수를 가지되, 첫번째 매개변수의 타입이
		Integer 인 메소드만 선택

//----------------------------------------------------------------------------------------------------

스프링에서는 어드바이스 동작 시점을 다섯가지로 지정할 수 있다.
 - before : 비즈니스 메소드 실행 전에 동작
 - after : 비즈니스 메소드가 실행된 후, 무조건 실행
	(try~catch~finally 블럭에서 finally 블럭에 해당)
 - after-returning : 비즈니스 메소드가 성공적으로 리턴되면 동작
 - after-throwing : 비즈니스 메소드 실행 중 예외가 발생하면 동작
	(마치 try~catch 블럭에서 catch 블럭에 해당)
 - around : Arround 는 메소드 호출 자체를 가로채 비즈니스 메소드 실행 전후에 처리할
	로직을 삽입할 수 있음

//-----------------------------------------------------------------------------------------------------

JoinPoint 와 바인드 변수
 : 횡단 관심에 해당하는 어드바이스 메소드를 의미있게 구현하려면 클라이언트가 호출한
  비즈니스 메소드의 정보가 필요하다.
  예를 들어, After Throwing 기능의 어드바이스 메소드를 구현한다고 가정하면,
  예외가 발생한 비즈니스 메소드 이름이 무엇인지, 그 메소드가 속한 클래스와 패키지 정보는
  무엇인지 알아야 정확한 예외 처리 로직을 구현할 수 있다.
  스프링에서는 이런 정보를 이용할 수 있도록 JoinPoint 인터페이스를 제공한다.

  import org.aspectj.lang.JoinPoint;

  private JoinPoint jp;

  [JoinPoint 가 제공하는 메소드]  
  Signature getSignature() : 클라이언트가 호출한 메소드의 시그니처 (리턴타입, 이름,
	매개변수) 정보가 저장된 Signature 객체 리턴
  Object getTarget() : 클라이언트가 호출한 비즈니스 메소드를 포함하는 비즈니스 객체
	리턴
  Object[] getArgs() : 클라이언트가 메소드를 호출할 때 넘겨준 인자 목록을 Object 
	배열로 리턴

  ** Before, After Returning, After Throwing, After 어드바이스에서는 JoinPoint를
     사용해야 하고, 유일하게 Around 어드바이스에서만 ProceedingJoinPoint 를
     매개변수로 사용해야 한다.  Around 어드바이스에서만 proceed() 메소드가 필요하기
     때문이다.  
  ** ProceedingJoinPoint 인터페이스는 JoinPoint 의 후손으로 proceed() 메소드가
     추가되었다.

  [Signature 가 제공하는 메소드]
  String getName() : 클라이언트가 호출한 메소드 이름 리턴
  String toLonString() : 클라이언트가 호출한 메소드의 리턴타입, 이름, 매개변수를
	패키지 경로까지 포함하여 리턴
  String toShortString() : 클라이언트가 호출한 메소드 시그니처를 축약한 문자열로 리턴

//-----------------------------------------------------------------------------------------------------

애스팩트(Aspect) 또는 어드바이저(Advisor)
 => 포인트컷과 어드바이스의 결합
 => 어떤 포인트컷 메소드에 대해서 어떤 어드바이스 메소드를 실행할지 결정한다.
 => AOP의 가장 중요한 개념
 => 트랜잭션은 <aop:advisor> 를 사용한다.
 => 포인트컷으로 지정한 메소드가 호출될 때, 어드바이스 메소드를 삽입하도록 하는 설정을
	애스팩트라고 한다.  애스팩트 설정에 따라 위빙이 처리된다.

//-----------------------------------------------------------------------------------------------------

 2. 포인트컷 설정
  : @Pointcut 사용
  - 하나의 어드바이스 클래스 안에 여러 개의 포인트컷을 선언할 수 있다.
  - 여러 포인트컷을 식별하기 위한 식별자가 필요한데, 이때 참조 메소드를 이용한다.
  - 참조 메소드는 메소드 몸체가 비어있는, 즉 구현 로직이 없는 메소드이다.
	어떤 기능 처리를 목적으로 하지 않고 단순히 포인트컷을 식별하는 이름으로만 
	사용된다.

//*************************************************************
package com.kh.testSpring.service.common;

import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Service;

@Service
public class LogAdvice {
	@Pointcut("execution(* com.kh.testSpring..*Impl.*(..))")
	public void allPointcut() {}
	
	@Pointcut("execution(* com.kh.testSpring..*Impl.get*(..))")
	public void getPointcut() {}
}
//**************************************************************

3. 어드바이스 설정
 : 어드바이스 클래스에는 횡단 관심에 해당하는 어드바이스 메소드가 구현된다.
  이 어드바이스 메소드가 언제 동작할지 결정하여 관련된 어노테이션을 메소드 위에
  설정하면 된다.

//*************************************************************
package com.kh.testSpring.service.common;

import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Service;

@Service
public class LogAdvice {
	@Pointcut("execution(* com.kh.testSpring..*Impl.*(..))")
	public void allPointcut() {}
	
	@Pointcut("execution(* com.kh.testSpring..*Impl.get*(..))")
	public void getPointcut() {	}
	
	@Before("allPointcut()")
	public void printLog() {
		System.out.println("[공통 로그] 비즈니스 로직 수행 전 동작");
	}
}
//***************************************************************

 [어드바이스 동작 시점과 관련된 어노테이션]
 org.aspectj.lang.annotation 패키지에서 제공됨

  @Before : 비즈니스 메소드 실행 전에 동작
  @AfterReturning : 비즈니스 메소드가 성공적으로 리턴되면 동작
  @AfterThrowing : 비즈니스 메소드 실행 중 예외가 발생하면 동작 (마치 catch)
  @After : 비즈니스 메소드가 실행된 후, 무조건 실행 (마치 finally)
  @Around : 호출 자체를 가로채 비즈니스 메소드 실행 전후에 처리할 로직을 삽입할 수
	있다.

 4. 애스팩트 설정
  : @Aspect 를 이용하여 설정
  - 반드시 포인트컷과 어드바이스를 결합하는 설정이 있어야 한다.

//*************************************************************
package com.kh.testSpring.service.common;

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Service;

@Service
@Aspect //Pointcut + Advice
public class LogAdvice {
	@Pointcut("execution(* com.kh.testSpring..*Impl.*(..))") //Pointcut
	public void allPointcut() {}
	
	@Pointcut("execution(* com.kh.testSpring..*Impl.get*(..))")
	public void getPointcut() {	}
	
	@Before("allPointcut()")  //Advice
	public void printLog() {
		System.out.println("[공통 로그] 비즈니스 로직 수행 전 동작");
	}
}

//*************************************************************

 [어드바이스 동작 시점별 샘플 클래스 작성 예]
//********************************************
package com.kh.testSpring.service.common;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Service;

@Service
@Aspect
public class BeforeAdvice {
	@Pointcut("execution(* com.kh.testSpring.service..*Impl.*(..))")
	public void allPointcut() {}
	
	@Before("allPointcut()")
	public void beforeLog(JoinPoint jp) {
		//메소드가 실행되기 전 공통으로 처리할 작업을 위해 사용한다.
		String methodName = jp.getSignature().getName();
		Object[] args = jp.getArgs();
		
		System.out.println("[메소드 호출전 확인] : " + methodName + "() 메소드 매개변수 갯수 : " + args.length);
		for(int i = 0; i < args.length; i++)
			System.out.println(i + "번째 매개변수 정보 : " + args[i].toString());
	}
}

//**************************************

package com.kh.testSpring.service.common;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Service;

import com.kh.testSpring.model.vo.User;

@Service
@Aspect
public class AfterReturningAdvice {
	@Pointcut("execution(* com.kh.testString.service..*Impl.get*(..))")
	public void getPointcut() {}
	
	@AfterReturning(pointcut="getPointcut()", returning="returnObj")
	public void afterLog(JoinPoint jp, Object returnObj) {
		//비즈니스 메소드가 리턴한 결과 데이터를 다른 용도로 처리할 때 사용한다.
		String methodName = jp.getSignature().getName();
		
		if(returnObj instanceof User) {
			User user = (User)returnObj;
			if(user.getUserId().equals("admin")) {
				System.out.println("로그인 : admin");
			}
		}
		
		System.out.println("[메소드 리턴] " + methodName + "() 메소드 리턴값 : " + returnObj.toString());
	}
}

//*************************************

package com.kh.testSpring.service.common;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Service;

@Service
@Aspect
public class AfterThrowingAdvice {
	@Pointcut("execution(* com.kh.testSpring.service..*Impl.*(..))")
	public void allPointcut() {}
	
	@AfterThrowing(pointcut="allPointcut()", throwing="exceptObj")
	public void exceptionLog(JoinPoint jp, Exception exceptObj) {
		//비즈니스 메소드 실행도중에 예외가 발생했을 때, 공통적인 예외처리 로직을 제공할 목적으로 사용하는 어드바이스이다.
		String methodName = jp.getSignature().getName();
		System.out.println(methodName + "() 메소드 수행 중 예외 발생!");
		
		if(exceptObj instanceof IllegalArgumentException) {
			System.out.println("부적합한 값이 입력되었습니다.");
		}else if(exceptObj instanceof NumberFormatException) {
			System.out.println("숫자 형식의 값이 아닙니다.");
		}else if(exceptObj instanceof Exception) {
			System.out.println("예외가 발생했습니다.");
		}
	}
}

//*****************************************

package com.kh.testSpring.service.common;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Service;

@Service
@Aspect
public class AfterAdvice {
	@Pointcut("execution(* com.kh.testSpring.service..*Impl.*(..))")
	public void allPointcut() {}
	
	@After("allPointcut()")
	public void finallyLog() {
		//예외 발생 여부에 상관없이 무조건 수행되는 어드바이스임
		System.out.println("[후 실행] 비즈니스 로직 수행 후 무조건 작동");
	}
}

//**********************************

package com.kh.testSpring.service.common;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Service;
import org.springframework.util.StopWatch;

@Service
@Aspect
public class AroundLog {
	@Pointcut("execusion(* com.kh.testSpring.service..*Impl.*(..))")
	public void allPointcut() {}
	
	@Around("allPointcut()")
	public Object aroundLosg(ProceedingJoinPoint pp) throws Throwable{
		//사전, 사후 처리를 모두 해결하고자 할 때 사용하는 어드바이스이다.
		String methodName = pp.getSignature().getName();
		
		StopWatch stopWatch = new StopWatch();
		stopWatch.start();
		
		Object obj = pp.proceed();
		
		stopWatch.stop();
		
		System.out.println(methodName + "() 메소드 수행에 걸린 시간 : " + stopWatch.getTotalTimeMillis() + "(ms)초");
		
		return obj;
	}
}

//***********************************

[외부 Pointcut 참조하기]

package com.kh.testSpring.service.common;

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public class PointcutCommon {
	@Pointcut("execution(* com.kh.testSpring.service..*Impl.*(..))")
	public void allPointcut() {}
	
	@Pointcut("execution(* com.kh.testSpring.service..*Impl.get*(..))")
	public void getPointcut() {}
}


package com.kh.testSpring.service.common;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Service;

@Service
@Aspect
public class BeforeAdviceOutAspect {
	@Before("PointcutCommon.allPointcut()")
	public void beforeLog(JoinPoint jp) {
		String methodName = jp.getSignature().getName();
		Object[] args = jp.getArgs();
		
		System.out.println("[사전처리] " + methodName + "() 메소드 args 정보 : " + args[0].toString());
	}
}

//************************************













 



[JPA 구현 방법 - QueryDSL 사용]

// ****************************************************************
[QueryDSL 사용]

QueryDSL 은 한마디로 SQL, JPQL 등을 코드로 작성할 수 있도록 해주는 빌더 오픈소스 프레임워크이다.
QueryDSL 은 JPA 뿐만 아니라 SQL, Mongodb, Lucenece 등 다양한 언어에 대해서 서비스를 제공한다.
 => 공식 사이트 참조 : http://querydsl.com/

QueryDSL의 장점은 
 - 문자가 아닌 코드로 쿼리를 작성함으로써, 컴파일 시점에 문법 오류를 쉽게 확인할 수 있다.
 - 자동 완성 등 IDE의 도움을 받을 수 있다.
 - 동적인 쿼리 작성이 편리하다.
 - 쿼리 작성 시 제약 조건 등을 메서드 추출을 통해 재사용할 수 있다.

QueryDSL JPA 는
 ① SQL, JPQL 을 코드로 작성할 수 있도록 해주는 빌더 API 이고,
 ② Entity 클래스와 매핑되는 QClass 라는 객체를 사용해서 쿼리를 실행한다.

QClass 란 ?
 QueryDSL 은 컴파일 단계에서 엔티티를 기반으로 QClass 를 생성하는데 
 JPAAnnotationProcessor 가 컴파일 시점에 작동해서 @Entity 등등의 어노테이션을 찾아 
 해당 파일들을 분석해서 QClass 를 만든다.
 QClass 는 Entity 와 형태가 똑같은 Static Class 이다.
 QueryDSL 은 쿼리를 작성할 때 QClass 를 기반으로 쿼리를 실행한다.

JPQL 이란 ?
 JPA 에서 지원하는 다양한 쿼리 방법 중 가장 단순한 조회 방법으로, 
 SQL 의 경우에는 DB 테이블을 대상으로 쿼리를 질의하지만, 
 JPQL 은 엔티티 객체를 대상으로 쿼리를 질의한다.

 EX)

  String jpql = “select m From MemberEntity m where m.userName like ‘%hello%’”;
  List<Member> result = em.createQuery(jpql, Member.class).getResultList();
  (SQL 로 변환시) select * from members where user_name like ‘%hello%’;


JPQL 에는 문제점이 존재한다.

JPQL 의 문제점 --------------------------------------
 ① 쿼리를 여전히 문자열로 입력한다.
    -> 오타가 발생하거나 관리하는데 있어서 어려움이 따르고, type-check 가 불가능하다

 ② 컴파일 단계에서 오류를 확인할 수 없고, 런타임에서 해당 쿼리가 실행되어야 오류를 발견할 수 있다.
    -> 테스트 코드를 짜면 불안을 덜 수 있긴 하지만, 
      실제 프로그램을 운영하면서 오류가 발생할 수도 있다는 부담이 너무 커진다.

 QueryDSL JPA 는 JPQL 이 가지고 있는 문제점들을 해결해준다.

QueryDSL JPA 를 사용해야 하는 이유 ---------------------------
 ① 쿼리를 여전히 문자열로 입력하기 때문에 오타가 발생하거나 관리하기 어렵다.
    -> QueryDSL 은 쿼리를 문자열로서가 아니라 코드를 통해서 작성하기 때문에 오타가 날 확률이 적어지고, 
      객체 지향적으로 개발할 수 있다.

 ② 컴파일 단계에서 오류를 확인할 수 없고, 런타임 시 해당 쿼리가 실행되어야지만 오류를 확인할 수 있다.
    -> QueryDSL 은 코드로서 작성하기 때문에 컴파일 단계에서도 오류를 빠르게 발견할 수 있다.

    예를 들어서
    회원(member) 와 포인트(point) 를 조인해서 가져와야 할 때
    JPQL 의 경우에는

    String jpql = "select * from Member m join Point p on p.member_id = m.id"
    List<Member> result = em.createQuery(jpql, Member.class).getResultList();
    이런식으로 쿼리를 작성해야 하지만,
    QueryDSL 을 사용했을 때에는

    return jpaQueryFactory
          .from(member)
          .join(member.point, point)
          .fetch();

    이런 식으로 코드를 사용해서 나타낼 수 있다.
    오타가 나더라도 컴파일 단계에서 오류를 확인 할 수 있고, 
    코드로서 작성하기 때문에 더욱 객체 지향적으로 개발할 수 있다.

이러한 이유로 spring 에서 JPA 를 사용할 때 QueryDSL JPA 를 보통 함께 사용한다.
// ***********************************************************


[1]. build.gradle 에 QueryDSL 세팅하기 ******************************

먼저 build.gradle 에 QueryDSL 관련 코드를 세팅해줘야 한다.

// build.gradle ------------------------------------------------------------------------
dependencies {
	... 
	// 스프링 부트 3.0 이상 : Unable to load class 'javax.persistence.Entity'. 에러 발생할 경우
	//implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	//annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

	// 스프링 부트 3.0 미만
	implementation 'com.querydsl:querydsl-jpa'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"

	implementation 'com.querydsl:querydsl-core'
	implementation "com.querydsl:querydsl-collections"

	annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 에러 대응 코드
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.annotation.Entity) 에러 대응 코드
}

def querydslSrcDir = 'src/main/generated'
sourceSets {
  main {
    java {
      srcDirs += [ querydslSrcDir ]
    }
  }
}

compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

clean {
  delete file(querydslSrcDir)
}
//-------------------------------------------------------------------------------------------------

[dependencies 설명]

 * implementation 'com.querydsl:querydsl-jpa'
   → QueryDSL 을 사용하기 위한 라이브러리
   → QuerydslRepositorySupport, QuerydslPredicateExecutor 등 
      QueryDSL 내부 클래스는 사용 가능하지만, 실제로 쿼리를 위해 사용되는 QClass 는 생성되지 않는다.

 * implementation 'com.querydsl:querydsl-apt'
   → QClass 를 생성하기 위한 라이브러리

 * annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
   → QueryDSL JPA 의 경우에는 QClass 를 활용해서 동작하는데 
      @Entity 어노테이션을 선언한 클래스를 탐색하고, QClass 를 생성한다.

 * QClass 를 생성하는 방법에는 크게 두가지로 나뉜다.

   ① com.ewerk.gradle.plugins.querydsl 사용
    -> 2018년 이후 업데이트 된 적이 없다.
    -> gradle 버전이 계속적으로 업데이트되면서 해당 플러그인 외 여러가지 설정해줘야 할 것들이 많다.

   ② annotationProcessor 사용    

     annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
     annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    -> 이클립스 재단으로 자바가 이관되면서 java → jakarta 로 이름이 변경되었다.
    -> Q 파일을 찾지 못해서 발생하는 오류인 java.lang.NoClassDefFoundError 
      (javax.annotation.Entity / javax.annotation.Generated) 에러 발생 대응을 위한 코드이다.


//sourceSets ---------------------------------------------------------------------
def querydslSrcDir = 'src/main/generated'
sourceSets {
  main {
    java {
      srcDirs += [ querydslSrcDir ]
    }
  }
}
//-----------------------------------------------------------------------------------
 -> gradle build 시 QClass 소스도 함께 build 하기 위해서 sourceSets 에 해당 위치를 추가해준다.


//compileJava -----------------------------------------------------------------------
compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}
//-----------------------------------------------------------------------------------
 -> 해당 내용을 명시해주지 않으면 Q 파일 내 Generated 를 import 할 때 
   자바 9 에만 있는 import javax.annotation.processing.Generated 로 import 해준다.
 -> 그렇기 때문에 다른 버전에서도 사용할 수 있도록 java.annotation.Generated 로 import 하도록 
   설정하는 코드이다.


//tasks.withType -------------------------------------------------------------------
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}
//------------------------------------------------------------------------------------
 -> annotationProcessorGeneratedSourcesDirectory 를 사용할 수도 있는데,
   Gradle 공식 문서에 해당 기능은 deprecated 되었고, 
   추후 major version 에선 삭제할 것이라고 소개하고 있기 때문에 
   generatedSourceOutputDirectory 를 사용한다.
 -> generatedSourceOutputDirectory 는 
   annotation processors 에서 생성한 소스 파일을 저장할 디렉토리를 지정해 준다. 
   (Gradle 공식문서 → CompileOptions - Gradle DSL Version 7.5.1 )
 -> 이 코드를 통해 위에서 선언한 querydslSrcDir 변수의 src/main/generated 에 
   annotation processors 가 만든 QClass 들을 저장해 준다.


//clean -----------------------------------------------------------------------------
clean {
	// clean 실행 시 생성된 QClass 삭제
	delete file(querydslSrcDir)
}
//-------------------------------------------------------------------------------------
 -> build clean 시에 생성되었던 QClass 를 모두 삭제 (querydslSrcDir = src/main/generated)


[실행하기] ----------------------------------------------------------------------------
만들어진 QClass 삭제하기 : Gradle > build > clean
QClass 만들기 : Gradle > build > compileJava
***
src > main > generated 내에 Q 클래스가 만들어졌으면 queryDSL 설정이 정상적으로 된 것이다.
***


[2]. QueryDSL 사용하기 ************************************************

① QuerydslConfig 파일 설정하기 ------------------------------------------

//config.QuerydslConfig.java -----------------------------------------
@Configuration
public class QuerydslConfig {
    @PersistenceContext
    private EntityManager entityManager;

    @Bean
    public JPAQueryFactory jpaQueryFactory() {
	return new JPAQueryFactory(entityManager);
    }
}
//-----------------------------------------------------------------------

[코드 설명] 

 * @PersistenceContext
   -> EntityManager 를 빈으로 주입할 때 사용하는 어노테이션
   -> 빈으로 주입받을 때 EntityManager 의 경우 @Autowired 가 아니라 해당 어노테이션으로 주입
   -> JPAQueryFactory 를 Bean 으로 등록해서 프로젝트 전역에서 사용할 수 있도록 한다


② QueryDSL 사용 Repository 구조 잡기 ------------------------------------------------

  Spring 에서 QueryDSL 을 사용하는 방법에는
  총 3가지 방법이 있다.

  첫번째 방법 : Spring Data Jpa Custom Repository 사용
  두번째 방법 : QueryRepositorySupport 사용
  세번째 방법 : JPAQueryFactory 사용


  1. 첫번째 방법 : Spring Data JPA Custom Repository 사용 --------------------------------------------

    -> Spring 에서 QueryDSL 과 JPARepository 를 함께 사용하려면 
      각 역할별 파일을 두 개 만들어 주거나, 하나의 파일이 두 개의 의존성을 가져야 한다. 
      이러한 경우 Spring Data JPA 에서 제공하는 Spring Data Custom Repository 를 사용하면 된다.
    -> 공식 Docs : Spring Data JPA - Reference Documentation 참조

    -> 해당 방식을 통해서 CustomRepository 를 
      JpaRepository 상속 클래스에서 함께 상속받아서 사용할 수 있다.
    ->구현된 Repository 구조는 아래와 같다.

     Repository(interface) 가 
     JpaRepository(interface), CustomRepository(interface)를 다중 상속받고,
      → CustomRepository 인터페이스에 선언되어 있는 메소드에 대한 구현은 
        RepositoryImpl 에서 한다.
      → 그리고 사용자는 Repository 인터페이스를 DI 받아서 사용한다.
      → RepositoryImpl은 Repository를 직접적으로 구현하지 않는데 기능을 사용할 수 있는 이유는
        사용자 정의 구현 클래스인 경우 
	JPA 가 파일명이 repository interface 이름 + Impl 인 클래스를 찾아서 
	interface 에 JpaRepository를 Injection 할 때에 Impl 객체를 삽입해주기 때문에 
	사용할 수 있다.
      → 그렇기 때문에 반드시 구현체 파일명이 interface 명 + impl 이여야 한다.

    -> 이 방식의 경우 총 3개의 repository 관련 파일이 만들어진다.

      첫번째, RepositoryCustom 파일 (interface)
       -> QueryDSL 로 커스텀해서 사용할 추상메소드 선언하는 파일
//------------------------------------------------------------------------
public interface XXXRepositoryCustom {
}
//------------------------------------------------------------------------

     두번째, Repository 파일 (interface)
      -> JpaRepository 와 CustomRepository interface 를 상속한 파일
      -> 사용자는 해당 파일을 DI 받아서 사용한다
//----------------------------------------------------------------------
public interface XXXtRepository 
	extends JpaRepository<Content, Long>, XXXRepositoryCustom {
}
//---------------------------------------------------------------------

     세번째, RepositoryImpl 파일 (class)
      -> RepositoryCustom interface 에 선언한 추상메소드 @Override 구현하는 파일
//------------------------------------------------------------------------------------------
@RequiredArgsConstructor
public class XXXRepositoryImpl implements XXXRepositoryCustom {
  private final JPAQueryFactory queryFactory;
}
//------------------------------------------------------------------------------------------

EX) ---------------------------------------------------------------------------------------

public interface ContentRepositoryCustom {
}

@RequiredArgsConstructor
public class ContentRepositoryImpl implements ContentRepositoryCustom {
  private final JPAQueryFactory queryFactory;
}

public interface ContentRepository 
	extends JpaRepository<Content, Long>, ContentRepositoryCustom {

}
//--------------------------------------------------------------------------------------------

 * 첫번째 방법의 단점
  -> QueryDSL 을 사용하는 경우 만들어야 하는 파일이 많아지고, 그에 따른 관리 포인트가 늘어난다.



  2. 두번째 방법 : QueryRepositorySupport 상속하기 ---------------------------------------------
    -> 첫번째 방식처럼 여러 파일을 만들어서 상속받는 방식이 아니라 
       QuerydslRepositorySupport 만 상속하여 구조를 단순화 하는 방식이다.

Ex) ---------------------------------------------------------------------------------------------
@Repository 
public class ContentRepositorySupport extends QuerydslRepositorySupport {
  private final JPAQueryFactory queryFactory;
  
  public ContentRepositorySupport(JPAQueryFactory queryFactory) {
    super(Content.class);
    this.queryFactory = queryFactory;
  }
}
//--------------------------------------------------------------------------------------------


 * 두번째 방법 단점
   → 매번 Support 를 상속 받고, super 생성자에 Entity 를 등록해 줘야 한다.
   → Entity 를 save, delete 하는 repository 와 query 하는 repository 가 나뉘어 진다.



  3. 세번째 방법 : JPAQueryFactory 사용하기 --------------------------------------------------
    -> JPAQueryFactory 만 있으면 QueryDSL 기능을 모두 사용할 수 있다.
    -> 2번째 방식 처럼 super & 생성자를 사용하지 않아도 된다. 
    -> 사용하고자 하는 Q 클래스를 import 해서 사용하는 방식이다.

Ex) -----------------------------------------------------------------------------------------
@RequiredArgsConstructor
@Repository
public class ContentQueryRepository {
  private final JPAQueryFactory queryFactory;
  
  public List<Content> findByTitle(String title) {
    return queryFactory
              .selectFrom(content)
              .where(content.title.eq(title))
              .fetch();
  }
}
//-------------------------------------------------------------------------------------------

  * 세번째 방법 단점
    -> Entity 를 save, delete 하는 repository 와 query 하는 Repository 가 나뉘어 진다.


//****************************************
일반적으로 QueryDSL 을 사용할 때에는 첫번째 방식으로 가장 많이 사용한다.

두번째 (QueryRepositorySuppor), 세번째 (JPAQueryFactory) 방식의 경우에는 
Spring JPA 기능과 QueryDSL 을 사용하기 위해서 각각 파일을 만들어서 사용하기 때문에 
둘 간의 연관관계도 없고, 파일만 봤을 때 애매할 수 있다.

// 두번째, 세번째 방식의 경우 사용 예시 ---------------------------------------------------------

public interface ContentJpaRepository extends JpaRepository<Content, Long> {
}

@RequiredArgsConstructor
public class ContentQueryRepository {
  private final JPAQueryFactory jpaQueryFactory;
}

@RequiredArgsConstructor
public class Test {
  private final ContentJpaRepository contentJpaRepository;
  private final ContentQueryRepository contentQueryRepository;
  
  public void test() {
    contentJpaRepository.save();
    contentQueryRepository.customMethod();
  }
}
//--------------------------------------------------------------------------------------------------------

// 첫번째 방식으로 변경하면 아래와 같이 사용할 수 있다. -----------------------------------

//ContentRepositoryCustom.java -------------------------------

public interface ContentRepositoryCustom {
    Content findByUserSeq(Long userSeq);
}

//ContentRepositoryImpl.java ----------------------------------

import static show.grip.admin.content.model.QContent.content;

@Repository
@RequiredArgsConstructor
public class ContentRepositoryImpl implements ContentRepositoryCustom {
    private final JPAQueryFactory queryFactory;

    @Override
    public Content findByUserSeq(Long userSeq) {
        return queryFactory
                .selectFrom(content)
                .where(content.userSeq.eq(userSeq))
                .fetchFirst();
    }
}

//ContentRepository.java --------------------------------------

public interface ContentRepository 
	extends JpaRepository<Content, Long>, ContentRepositoryCustom {
}

//Service 클래스 코드에서는 다음과 같이 사용하기 ------------

contentRepository.findByUserSeq(userSeq);

//-----------------------------------------------------------------------------------------------


//***************************************************************
[querydsl 에서 여러가지 join을 사용하는 방법] 

[1. join (inner join)] --------------------------------------
먼저 가장 일반적인 inner join은 아래와 같이 사용하면 된다.

//------------------------------------------------
List<Member> result = queryFactory
		.selectFrom(member)
		.join(member.team, team) // innerJoin 과 같음
		//.rightJoin(member.team, team) // right outer join		
        //.leftJoin(member.team, team) // left outer join
		.where(team.name.eq("a"))
		//.on(team.name.eq("a")) // 이것과 where 절은 결과가 같음.. inner join이라서
		.fetch();
//-------------------------------------------------


[2. theta Join] ------------------------------------------
아예 연관관계가 없는 테이블끼리 join이 가능하다.

EX). 회원 정보를 저장하는 member 테이블과 
    팀 정보를 저장하는 team 테이블 에서 
    회원이름과 팀이름이 같은 경우 join을 하는 방법을 작성해 놓았다. 
    즉 이렇게 from 절에서 여러 엔티티를 선택하는 경우를 세타 조인이라고 한다.

(엄밀히 말해서 세타 조인을 정의해보면 조인(join) 연산은
카타시안 곱 (cartesian product) + 선택 연산 (select operation)
의 형태로 이루어 지는데 선택연산의 비교 연산자가 = , < , > 등이 사용되는 연산이 세타조인이다.
여기서 비교연산자가 = 이면 동등 조인 (equi join) 이라고 한다. ) 

세타 조인에서 left outer join이나 right outer join 같은 외부 조인은 불가능하다.

//사용 예제 ------------------------------------------

List<Member> result = queryFactory
		.select(member)
		.from(member, team)
		.where(member.userName.eq(team.name))
		.fetch();
//-------------------------------------------------------


[3. on 절] -----------------------------
querydsl에서 on절은 JPA 2.1 이상부터 적용이 가능하다.

 1) 필터링 기능
   on절을 이용하여 조인 대상을 필터링하는 기능을 사용할 수 있다.
   예시를 보면 팀이름이 "a" 인 팀만 조회하고 회원은 모두 조회하는 left outer join기능을 구현했다.
   이렇게 하면 team 이름이 "a" 인 팀 정보는 표시가 되고 
   그외의 팀정보는 null 로 표시된 tuple 값들이 나올 것이다.

//----------------------------------------------------------
List<Tuple> result = queryFactory
		.select(member, team)
		.from(member)
		.leftJoin(member.team, team).on(team.name.eq("a"))
		.fetch();
//---------------------------------------------------------- 


 2) 연관관계 없는 테이블끼리 외부 조인
   위에서 세타 조인에서는 외부조인이 불가능하다고 했다. 
   이럴 때 외부조인을 할 일이 있으면 on 절을 이용하면 된다.
   일반 조인에서는 id 값을 매핑시키기 때문에 
   연관관계 주인 객체에서 join 하고자하는 객체를 꺼내서 매핑 시키는 방식이라면 
   on 절에서는 그냥 그 객체를 그대로 꺼낸다. 

//---------------------------------------------------------

List<Tuple> result = queryFactory
		.select(member, team)
		.from(member)
		//.leftJoin(member.team, team) // 기존에 leftJoin을 할때 member의 team을 꺼내서 함 , 이렇게하면 id 값으로 매칭
		.leftJoin(team).on(member.userName.eq(team.name)) // 이름으로만 매칭
		.fetch();
//----------------------------------------------------------- 


[4. fetch join]
 페치 조인은 jpa 사용시 가장 기본적으로 사용하는 성능 최적화 방식이다. 
 연관된 엔티티나 컬렉션을 한번에 같이 조회해온다.

//-----------------------------------------------------------------------
Member findMember = queryFactory
		.selectFrom(member)
		.join(member.team, team).fetchJoin()
		.where(member.userName.eq("kang"))
		.fetchOne();
//-----------------------------------------------------------------------



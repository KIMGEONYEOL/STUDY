//************************************************************************
[JPA 구현 방법 : QueryDSL 사용 2]


[방법 1. 상속을 이용한 리포지토리] --------------------------------------------------------------------

 * Querydsl 사용시 QXX 클래스 사용 
   => static import 하면 Qmember 를 member로 사용 가능

 * 엔티티가 아닌 프로젝션
   => 예로, DTO 같은 경우 생성자에 @QueryProjection 을 붙이면 new QXXDTO로 프로젝션 가능하다
   => 필드명 다른 경우 as로 매핑한다.
   => 프로젝션 대상이 여러개인 경우 Tuple 로 나오는데 DTO 하나 만들어서 매핑하는게 더 좋은 방법이다.
   
 * where 문을 쉼표로 이으면 null일 경우 무시 가능하다. -> 효율적인 쿼리 작성 가능
 * 부속질의 -> JPAExpressions 사용 -> static import로 SQL처럼 사용 가능
   => 부속질의는 같은 엔티티 사용하려면 static import한 것 외에 따로 선언 필요
   => 예시 : QMember memberSub = new QMember(“memberSub”);

 * 결과 조회시 사용 메서드 설명
  - fetchOne() : 한 건 조회
  - fetch() : 리스트 조회, 데이터 없으면 빈 리스트 반환
  - fetchResults() : 페이징 정보 포함, total count 쿼리 추가 실행
  - fetchCount() : count 쿼리로 변경해서 count 수 조회

 * 메인 리포지토리와 Querydsl 리포지토리를 분리하고 싶다면 
   그냥 JpaRepository에 상속하지 않고 QueryRepository로 따로 만들어서 사용한다.

// jpa repository에 querydsl용 커스텀 인터페이스 리포지토리 추가 코드 예시 -------------------
public interface MemberRepository 
	extends JpaRepository<Member,Long>, MemberRepositoryCustom {
}
//------------------------------------------------------------------------------------------

// 커스텀 인터페이스 리포지토리 코드 예시 ---------------------------------------------------------
public interface MemberRepositoryCustom {
    List<MemberTeamDto> search(MemberSearchCondition condition);
    Page<MemberTeamDto> searchPageSimple(MemberSearchCondition condition, Pageable pageable);
    Page<MemberTeamDto> searchPageComplex(MemberSearchCondition condition, Pageable pageable);
}
//------------------------------------------------------------------------------------------

// 커스텀 인터페이스 구현체 
// 반드시 클래스명을 인터페이스명 + Impl
//-------------------------------------------------------------------------------------------
@RequiredArgsConstructor
public class MemberRepositoryImpl implements MemberRepositoryCustom{
    private final JPAQueryFactory queryFactory;

    @Override
    public List<MemberTeamDto> search(MemberSearchCondition condition){
        // querydsl 사용하니까 DTO도 QXX 사용해야함
        return queryFactory
                .select(new QMemberTeamDto(
                        member.id.as("memberId"),
                        member.username,
                        member.age,
                        team.id.as("teamId"),
                        team.name.as("teamName")))
                .from(member)
                .leftJoin(member.team, team)
                .where(
                        usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe())
                )
                .fetch();
    }

    @Override
    public Page<MemberTeamDto> searchPageSimple(
    MemberSearchCondition condition, Pageable pageable) {
        // querydsl 사용하니까 DTO도 QXX 사용해야함
        QueryResults<MemberTeamDto> results = queryFactory
                .select(new QMemberTeamDto(
                        member.id.as("memberId"),
                        member.username,
                        member.age,
                        team.id.as("teamId"),
                        team.name.as("teamName")))
                .from(member)
                .leftJoin(member.team, team)
                .where(
                        usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe())
                )
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetchResults();

        List<MemberTeamDto> content = results.getResults();
        long total = results.getTotal();

        //pageImpl 은 sprint data JPA의 page의 구현체임
        // content, pageable, 데이터전체개수를 받음
        return new PageImpl<>(content,pageable,total);
    }

    @Override
    public Page<MemberTeamDto> searchPageComplex(
    MemberSearchCondition condition, Pageable pageable) {
        // querydsl 사용하니까 DTO도 QXX 사용해야함
        List<MemberTeamDto> content = queryFactory
                .select(new QMemberTeamDto(
                        member.id.as("memberId"),
                        member.username,
                        member.age,
                        team.id.as("teamId"),
                        team.name.as("teamName")))
                .from(member)
                .leftJoin(member.team, team)
                .where(
                        usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe())
                )
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        JPAQuery<Member> countQuery = queryFactory
                .selectFrom(member)
                .leftJoin(member.team, team)
                .where(
                        usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe())
                );


        //pageImpl 은 sprint data JPA의 page의 구현체임
        // content, pageable, 데이터전체개수를 받음
        return PageableExecutionUtils.getPage(content, pageable,()->countQuery.fetchCount());
    }

    private BooleanExpression usernameEq(String username) {
        return hasText(username) ? member.username.eq(username):null;
    }

    private BooleanExpression teamNameEq(String teamName) {
        return hasText(teamName) ? team.name.eq(teamName):null;
    }

    private BooleanExpression ageGoe(Integer ageGoe) {
        return ageGoe != null ? member.age.goe(ageGoe):null;
    }

    private BooleanExpression ageLoe(Integer ageLoe) {
        return ageLoe != null ? member.age.loe(ageLoe):null;
    }
}
//-----------------------------------------------------------------------------------------------


[방법 2. 상속을 사용하지 않고 리포지토리 분리 작성하기] ------------------------------------ 

위에서는 상속을 이용해 QueryDSL Repository를 작성 사용하였다. 
하지만 핵심 비즈니스 로직이 있는 리포지토리와 화면에 맞춘 DTO, 
복잡한 통계성 쿼리 뽑는 리포지토리들은 분리하는게 좋다. 
위와 같이 상속을 사용하면 분리하는게 아니라 JPA 리포지토리가 계속해서 커지는 것이다.
따라서 분리해서 작성하는게 더 좋다.

//----------------------------------------------------------------------------------------
public interface RewardQueryRepository {
    Member findById(Long id);
}
------------------------------------------------------------------------------------------
@Repository
@RequiredArgsConstructor
public class RewardQueryRepositoryImpl implements RewardQueryRepository {

    private final JPAQueryFactory query;

    @Override
    public Member findById(Long id){
        // ... //
    }
}
//--------------------------------------------------------------------------------------

* 상속/구현 없는 Repository 는
  QueryDSL 만으로 Repository를 구성하는 방법입니다.

- 별도의 extends / implements 없이 JPAQueryFactory만 있으면 됩니다.
- 최소한의 Bean 등록을 위해 @Repository를 선언합니다.
- 특정 Entity 만 사용해야 한다는 제약도 없습니다.

//--------------------------------------------------------------------------------
@Repository // Bean 등록
public class FooQueryRepository {
    private final JPAQueryFactory queryFactory;

    public FooQueryRepository(JPAQueryFactory queryFactory) {
        this.queryFactory = queryFactory;
    }
    
    public List<Foo> findByName(String name) {
        return queryFactory.select(foo)
                .from(foo)
                .where(foo.name.eq(name))
                .fetch();
    }
}

- Test 코드
@SpringBootTest
class FooQueryRepositoryTest {

    @Autowired
    private FooRepository fooRepository;

    @Autowired
    private FooQueryRepository fooQueryRepository;


    @Test
    @DisplayName("Querydsl 상속/구현 없는 Repository 확인")
    void findByName() {
        // given
        String name = "foo";
        String likes = "movies";
        fooRepository.save(new Foo(name, likes));

        // when
        List<Foo> result = fooQueryRepository.findByName(name);

        // then
        assertThat(result.size()).isEqualTo(1);
        assertThat(result.get(0).getLikes()).isEqualTo(likes);

        fooRepository.deleteAllInBatch();
    }
}
// ------------------------------------------------------------------------------------- 

 

[번외:: QuerydslRepositorySupport 상속받아 사용하는 방식] -----------------------------

- 장점
  - getQuerydsl().applyPagination() : 스프링 데이터가 제공하는 페이징을 
                              Querydsl로 편리하게 변환 가능합니다. (단, Sort는 오류 발생)
  - from() 으로 시작 가능합니다.(최근에는 QueryFactory를 사용해서 select() 로 시작하는 것이 더 명시적)
  - EntityManager 를 제공합니다.

- 단점/한계
  - Querydsl 3.x 버전을 대상으로 만들어졌습니다. 
  - Querydsl 4.x에 나온 JPAQueryFactory로 시작할 수 없어서 
    select가 아닌 from으로 시작해서 작성해야 합니다.
  - QueryFactory를 제공하지 않습니다.
  - 스프링 데이터 Sort 기능이 정상 동작하지 않습니다.

 

*주의 : 방법 2인 'Custom Repository를 사용'하거나 
       방법 3인 '상속/구현없는 Repository를 사용'하게 되는 경우, 
       QuerydslSupport에서 제공해주는 페이징 처리는 사용할 수 없습니다.

//해결 코드 ------------------------------------------------------------------------------
public class FooRepositoryImpl 
	extends QuerydslRepositorySupport implements FooRepositoryCustom {
    
    private final JPAQueryFactory queryFactory;

    public FooRepositoryImpl(EntityManager em) {
        super(Foo.class);
        this.queryFactory = new JPAQueryFactory(em);
    }
    
    // ...
    
	@Override
    public Page<Foo> findByNamePaging(String name) {
        Pageable pageable = PageRequest.of(0, 10);
        JPQLQuery<Foo> jpaQuery = from(foo)
                .where(foo.name.eq(name))
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .select(foo);
        // getQuerydsl()이 offset, limit, sorting 자동으로 적용해준다.
        List<Foo> content = getQuerydsl().applyPagination(pageable, jpaQuery).fetch();

        return PageableExecutionUtils.getPage(content, pageable, jpaQuery::fetchCount);
    }
    
    // ...
    
}
//------------------------------------------------------------------------------------------------


//********************************************************************
[ 페이징 처리 : pageable sort 사용하기 ] *************************************

 Controller의 파라미터로 Pageable을 지정하면 
 URI에서 받는 페이징 관편 파라미터가 알아서 들어온다. 
 이 데이터를 바탕으로 공지사항을 반환하는 페이징 처리를 해보자.

// NotceController.java -------------------------------------------

@RestController
@RequestMapping("/api/v1/notices")
@RequiredArgsConstructor
public class NoticeController {

    private final NoticeService noticeService;   

    @GetMapping
    public ResponseEntity<Page<NoticeDto>> getNotice(
                        @PageableDefault(size = 4,sort = "createdDate", direction = Sort.Direction.DESC)
                        Pageable pageable) {
        return ResponseEntity.ok(noticeService.getNotice(pageable, NoticeType.ALL));
    }
}
//-------------------------------------------------------------------
 => URI에 페이징 파라미터로 Pageable에 넣기 위해서는 page, size, sort 파라미터를 주면 된다. sort에는 정렬할 필드명,desc 또는 필드명,asc 로 쉼표(,)로 direction을 구분합니다.


// NoticeServiceImpl.java --------------------------------------

@Service
@Transactional
@RequiredArgsConstructor
public class NoticeServiceImpl implements NoticeService {

    private final NoticeQueryRepository noticeQueryRepository;    

    @Override
    public Page<NoticeDto> getNotice(Pageable pageable, NoticeType noticeType) {
        return noticeQueryRepository.findPagingNotice(pageable, noticeType);
    }
}
//---------------------------------------------------------------


// QueryDslUtil.java --------------------------------------------

public class QueryDslUtil {

    public static OrderSpecifier<?> getSortedColumn(Order order, Path<?> parent, 
    String fieldName) {
        Path<Object> fieldPath = Expressions.path(Object.class, parent, fieldName);

        return new OrderSpecifier(order, fieldPath);
    }
}
//---------------------------------------------------------------------
 => Order, Path, fieldName을 전달하면 OrderSpecifier 객체를 리턴하는 
    Util 클래스를 작성해서 Sort시 마다 사용할 수 있도록 해준다. 
    Pageable을 이용해서 Sort할 때 사용하는 클래스이다.


// NoticeQueryRepositoryImpl.java -----------------------------

@Repository
@RequiredArgsConstructor
public class NoticeQueryRepositoryImpl implements NoticeQueryRepository {

    private final JPAQueryFactory query;

    @Override
    public Page<NoticeDto> findPagingNotice(Pageable pageable, NoticeType noticeType) {
        List<OrderSpecifier> ORDERS = getAllOrderSpecifiers(pageable);

        QueryResults<NoticeDto> results = query
                .select(new QNoticeDto(
                        notice.title,
                        notice.text,
                        notice.createdDate
                ))
                .from(notice)
                .where(notice.noticeType.eq(noticeType))
                .orderBy(ORDERS.stream().toArray(OrderSpecifier[]::new))
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetchResults();


        List<NoticeDto> content = results.getResults();
        long total = results.getTotal();

        return new PageImpl<>(content,pageable,total);
    }


    private List<OrderSpecifier> getAllOrderSpecifiers(Pageable pageable) {
        List<OrderSpecifier> ORDERS = new ArrayList<>();

        if (!isEmpty(pageable.getSort())) {
            for (Sort.Order order : pageable.getSort()) {
                Order direction = order.getDirection().isAscending() ? Order.ASC : Order.DESC;

                switch (order.getProperty()) {
                    case "createdDate":
                        OrderSpecifier<?> createdDate = QueryDslUtil
                                .getSortedColumn(direction, Qnotice.notice, "createdDate");
                        ORDERS.add(createdDate);
                        break;
                    default:
                        break;
                }
            }
        }

        return ORDERS;
    }
}
//--------------------------------------------------------------
 => 생성된 OrderSpecifier 객체를 orderBy 함수의 argument로 넣어주면 
    Pageable로 들어온 Sort를 사용할 수 있다.


[ 페이징 처리 : Slice 기법 사용하기 ] --------------------------------------------

Slice 기법이란 일반적인 페이징 방식이 아닌 스크롤을 밑으로 내려가면서 데이터를 불러오는 방식입니다.
Slice는 최종 페이지 수를 알 필요가 없으므로 count 쿼리가 필요 없습니다.
JPA에서는 Page 대신 Slice로 반환하면 알아서 처리해 주지만 QueryDSL에서는 직접 구현해야 한다.

Slice의 동작 방식은 다음과 같다.

N개의 데이터가 필요하다면 N+1 개의 데이터를 가져온다.
결과 값의 개수 > N 이라면 다음 페이지가 존재한다는 뜻입니다.
결과 값의 개수가 > N 라면 추가적으로 가져온 +1 데이터를 빼고 결과 리스트를 반환한다.


// RepositorySliceHelper.java -------------------------------------------------
// Slice 로직 관련 클래스를 정의해 준다.

public class RepositorySliceHelper {

    public static <T> Slice<T> toSlice(List<T> contents, Pageable pageable) {

        boolean hasNext = isContentSizeGreaterThanPageSize(contents, pageable);
        return new SliceImpl<>(hasNext ? subListLastContent(contents, pageable) : 
		contents, pageable, hasNext);
    }

    // 다음 페이지 있는지 확인
    private static <T> boolean isContentSizeGreaterThanPageSize(List<T> content, 
		Pageable pageable) {
        return pageable.isPaged() && content.size() > pageable.getPageSize();
    }

    // 데이터 1개 빼고 반환
    private static <T> List<T> subListLastContent(List<T> content, Pageable pageable) {
        return content.subList(0, pageable.getPageSize());
    }
}
//----------------------------------------------------------------------------------

[적용한 코드]
//---------------------------------------------------------------------------------
public Slice<NotificationDto> findNotificationByUsername(String username, Pageable pageable) {

        List<OrderSpecifier> ORDERS = getAllOrderSpecifiers(pageable);

        List<NotificationDto> results = query
                .select(new QNotificationDto(
                        notification.title,
                        notification.message,
                        notification.checked,
                        notification.notificationType,
                        notification.uuid,
                        notification.TeamId
                ))
                .from(notification)
                .where(notification.member.username.eq(username))
                .orderBy(ORDERS.stream().toArray(OrderSpecifier[]::new))
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize() + 1)
                .fetch();

        return RepositorySliceHelper.toSlice(results, pageable);
    }
//--------------------------------------------------------------------------------------
 => offset 부분에 +1로 데이터를 하나 더 가져왔다는 것과 
    앞서 만들었던 RepositorySliceHelper를 사용한 것만 확인하면 됩니다. 
    반환은 아래와 같은 형식으로 됩니다.
//---------------------------------------------------------------------------------
{
    "content": [
        {
            "title": "title",
            "message": "message",
            "checked": false,
            "notificationType": "ADMIN_CUSTOM",
            "uuid": "9707c197-bbec-43db-8dee-f8b885126ec4",
            "teamId": null
        },

        // ... 생략
      
        {
            "title": "title",
            "message": "message",
            "checked": false,
            "notificationType": "ADMIN_CUSTOM",
            "uuid": "9707c197-bbec-43db-8dee-f8b885126ec4",
            "teamId": null
        }
    ],
    "pageable": {
        "sort": {
            "unsorted": false,
            "sorted": true,
            "empty": false
        },
        "pageSize": 20,
        "pageNumber": 1,
        "offset": 20,
        "paged": true,
        "unpaged": false
    },
    "number": 1,
    "numberOfElements": 10,
    "first": false,
    "last": true,
    "size": 20,
    "sort": {
        "unsorted": false,
        "sorted": true,
        "empty": false
    },
    "empty": false
}
//------------------------------------------------------------------------------


[queryDSL 에서 서브쿼리 사용] **************************************************

[1. select SubQuery (Select 절의 서브 쿼리)]
//--------------------------------------------------------------------------------------------
QBoard subBoard = new QBoard("subBoard");

public void selectSubQuery() {
    
    List<Tuple> result = queryFactory
                             .select(board.title,
                                     board.views,
                                     JPAExpressions.select(subBoard.views.avg())
                                             .from(subBoard)
                             )
                             .from(board)
                             .fetch();
}
//-------------------------------------------------------------------------------------------------
 => 같은 Entity를 사용했을 때, 
    메인 쿼리와 서브 쿼리의 별칭이 겹치면 안 되기 때문에 
    QBoard 객체를 하나 더 생성해 줘야 하며, 이때 Alias를 직접 지정해줘야 합니다. (= subBoard)

 => 서브 쿼리는 JPAExpressions를 통해 생성하게 되는데, 
    select 절의 서브 쿼리에서 만약 결과에 대한 Alias를 지정하고 싶은 경우 
    아래와 같이 ExpressionUtils.as() 메서드를 통해 서브 쿼리를 한번 감싸주면서 
    Alias를 지정할 수 있습니다.
//----------------------------------------------------
ExpressionUtils.as(
    JPAExpressions.select(subBoard.views.avg())
            .from(subBoard),
    "customAlias")        
)
//--------------------------------------------------- 


[2. where SubQuery (Where 절의 서브 쿼리)] 
//-----------------------------------------------------------------------------------------
QBoard subBoard = new QBoard("subBoard");

public void whereSubQuery() {
    
    List<Board> result = queryFactory
                            .selectFrom(board)
                            .where(board.views.geo(
                                JPAExpressions.select(subBoard.views.avg())
                                        .from(subBoard)
                            ))
                            .fetch();
}
//-----------------------------------------------------------------------------------------
 => where 절의 서브 쿼리 역시 JPAExpressions를 통해 생성하게 됩니다.

 *** (Querydsl은 From 절에서의 SubQuery를 지원하지 않습니다.) ***
